name: Build APK and Deploy to GitHub Pages

on:
  push:
    branches:
      - gradle

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > mg-build-release-key.keystore

      - name: Verify Keystore File Size
        run: |
          if [ ! -s mg-build-release-key.keystore ]; then
            echo "Keystore file is empty or not restored. Exiting..."
            exit 1
          fi

      - name: Remove Existing Project Directory
        run: |
          if [ -d "com.mobagenie.mg.build" ]; then
            rm -rf com.mobagenie.mg.build
          fi

      - name: Copy Keystore to gradle/public
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/gradle/public"
          cp mg-build-release-key.keystore "${GITHUB_WORKSPACE}/gradle/public/mg-build-release-key.keystore"

      - name: Build APK using Docker
        run: |
          REPO_URL="${{ github.event.repository.html_url }}"
          REPO_NAME=$(basename -s .git "$REPO_URL")
          APP_NAME=$(echo "$REPO_NAME" | sed -e 's/-/ /g' -e 's/^./\U&/')
          PACKAGE_NAME=$(echo "$REPO_URL" | sed 's|https://github.com/||;s|/|.|g;s|.git$||;s|-|.|g;s|[^a-zA-Z0-9.]||g')

          docker run --rm \
            -v "${{ github.workspace }}:/github/workspace" \
            -w /github/workspace \
            -e KEYSTORE_PASSWORD="${{ secrets.KEYSTORE_PASSWORD }}" \
            -e KEY_ALIAS="${{ secrets.KEY_ALIAS }}" \
            -e KEY_PASSWORD="${{ secrets.KEY_PASSWORD }}" \
            mobagenie/mgbuild:v1 sh -c "
            cd com.mobagenie.mg.build &&
            cordova create com.$PACKAGE_NAME com.$PACKAGE_NAME $APP_NAME &&
            cp -r gradle/public/* www/ &&
            cordova platform add android &&
            cordova build android --release -- --packageType=apk --keystore=gradle/public/mg-build-release-key.keystore --storePassword=\$KEYSTORE_PASSWORD --alias=\$KEY_ALIAS --password=\$KEY_PASSWORD --keystoreType=jks"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive APKs
        run: |
          REPO_URL="${{ github.event.repository.html_url }}"
          PACKAGE_NAME=$(echo "$REPO_URL" | sed 's|https://github.com/||;s|/|.|g;s|.git$||;s|-|.|g;s|[^a-zA-Z0-9.]||g")
          
          mkdir -p apk
          cp -r com.$PACKAGE_NAME/platforms/android/app/build/outputs/apk/release/*.apk apk/
          echo "APK files in apk directory:"
          ls apk

      - name: Set tag and release name
        id: set_release_info
        run: |
          TAG_NAME="release-$(echo $GITHUB_SHA | cut -c1-7)"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release $(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: "APK build for gradle branch"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: apk/*.apk
          asset_name: MyApp-release.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: gradle/public
          publish_branch: gh-pages
          force_orphan: true